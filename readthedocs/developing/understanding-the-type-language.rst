=======================
Понимание Type Language
=======================


`Telegram's Type Language <https://core.telegram.org/mtproto/TL>`__
(также извечтен как TL, может быть найден в файлах ``.tl``) - это краткий способ определить
то, что другие языки программирования обычно называют классами или структурами.

Каждое определение написано следующим образом для объекта Telegram
определяется следующим образом:

    ``имя#id имя_аргумента:тип_аргумента = Тип``

Это означает, что из одной строки вы узнаёте, что значит имя ``TLObject``.
Вы знаете уникальный идентификатор, и знаете, какие у него аргументы.
На самом деле не так уж и сложно написать генератор для генерации кода
для любой платформы!

Созданный код должен уметь *кодирывать* ``TLObject``
The generated code should also be able to *encode* the ``TLObject``
(пусть это будет запрос или тип) в байты, чтобы они могли быть отправлены
по сети. Это тоже не сложно, потому что Вы знаете, как ``TLObject``ы
сделаны, и как типы должны быть сериализованы.

Вы можете написать свой собственный генератор кода или использовать тот,
который предоставляет эта библиотека, но, пожалуйста,
будьте добры и оставьте ссылку на этот проект, так как он помог вам.

Это только введение. Язык ``TL`` не *настолько* простой. Но
он и не слишком млодный. Вы можете рассматривать файлы в
``telethon_generator/`` и учиться, как парсить более сложные строки,
например ``flags`` (чтобы отображать поля, которые могут быть, а могут
и не быть указаны совсем), и ``vector``ы
