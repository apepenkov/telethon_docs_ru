=================
Структура проекта
=================


Главный интерфейс
=================

Сама библиотека находится в папке ``telethon/``. Файл
``__init__.py`` показывает основной ``TelegramClient``, класс,
который служит как хороший интерфес для наиболее часто используемых
методов в Telegram, непример отправка сообщений, получение истории
сообщений, обработки событий и т.п.

``TelegramClient`` наследуется от нескольких смешанных классов ``Method``,
поскольку существует так много методов, то их размещение в одном файле
сделало бы поддержку сложной (там было 3000 строк до разделения на файлы!)
Это «божественный объект», но на самом деле это - лишь способ
взаимодействия с Telegram.

``TelegramBaseClient`` - это азбука, которая будет поддерживать все эти модули,
чтобы они могли хорошо работать вместе. Он даже не знает, как вызывать методы,
потому что они сначала должны быть получены с помощью пользовательской информации
(для комфортной работы с сущностями).

Клиент использует ``network/mtprotosender.py``. ``MTProtoSender``
ответсвеннен за подключение, пере-подключение, запаковку, распаковку,
отправку и получение данных из сети.
По существу, это низкоуровневая коммуникация с Telegram, и обработка
относящихся к MTProto функций и типов, например ``BadSalt``

Отправитель использует класс ``Connection``, который знает формат,
в котором исходящие запросы должны быть отправлены (как закодировать
их длину и тело, если далее они должны быть зашифрованны).

Авто-сгенерированный код
========================

Файлы в ``telethon_generator/`` используются, чтобы генерировать код,
который находится в ``telethon/tl/``. Парсеры принимают файлы в
особом формате (например ``.tl`` для объектов и ``.json`` для ошибок)
и выдают сгенерированные в качестве Python классов, запросы и типы,
определенные в ``.tl`` файле. Также они создают индексы, чтобы
классы было проще импортировать.


Пользовательская документация также может быть создана для простой
навигации по большому количеству элементов, предлагаемых API.

Если вы клонируете репозиторий, вам нужно будет запустить ``python setup.py gen``,
чтобы сгенерировать код. При установке библиотеки также запускается генератор,
но указанная команда просто сгенерирует код.
